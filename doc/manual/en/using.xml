<?xml version="1.0" encoding="UTF-8" ?>
<chapter id="use_ahven_chapter">
<!--
 Using Ahven
 - Writing a test case
 - Composing test hierarchies with test suites
 - Running tests
-->
    <title>Using Ahven</title>
    <para>
        The heart of Ahven is an abstract type called
        <classname>Test</classname>. It presents an entity which can be run
        by <emphasis role="bold">a test runner</emphasis>.
        Types <classname>Test_Case</classname> and
        <classname>Test_Suite</classname> are derived from the
        <classname>Test</classname> type. The <classname>Test_Case</classname>
        type is the base type for unit tests and the
        <classname>Test_Suite</classname> type is a container, which
        can hold other <classname>Test</classname> objects.
    </para>
    <sect1 id="writing_test_case">
    	<title>Writing a Test Case</title>
    	<para>
            To create a new test case you need to create a new package
            and a new type, which is derived from
            <classname>Ahven.Framework.Test_Case</classname>.
            There are no required functions or procedures to
            be implemented, but to make the test case do something
            you need to override the <function>Initialize</function> procedure
            and create at least one procedure which tests something.
            <xref linkend="testcase_a_spec"/> shows a such package specification.
        </para><example id="testcase_a_spec">
        <title>A test case package specification</title>
        <screen><![CDATA[-- my_tests.ads
with Ahven.Framework;
package My_Tests is
   type Test is new Ahven.Framework.Test_Case with null record;

   procedure Initialize (T : in out Test);
private
   procedure Test_Addition;
end My_Tests;
]]></screen></example>
        <para>
            To add tests to the test case you need to
            call procedure <function>Ahven.Framework.Add_Test_Routine</function>
            during the test case initialization (in other words, in the
            <function>Initialize</function> procedure).
            <xref linkend="testcase_a_body"/> shows how the
            <function>Test_Addition</function> is added to the test case.
            It also shows how to set a name for the test case with
            the <function>Set_Name</function> procedure.
        </para><example id="testcase_a_body">
        <title>A test case package body</title>
        <screen><![CDATA[-- my_tests.adb
package body My_Tests is
   procedure Initialize (T : in out Test) is
   begin
      Set_Name (T, "My tests");

      Ahven.Framework.Add_Test_Routine
        (T, Test_Addition'Access, "Addition");
   end Initialize;

   procedure Test_Addition is
   begin
      null;
   end Test_Addition;
end My_Tests;
]]>
</screen></example>
    </sect1>
    <sect1 id="calling_assert">
        <title>Calling Assertion Procedures</title>
        <para>
            To test whether a condition is true or false,
            Ahven offers you three procedures. The first
            procedure is <function>Ahven.Assert</function>.
            It takes a boolean value and a message string as its parameters.
            If the boolean value is false the <function>Assert</function>
            raises an <classname>Assertion_Error</classname> exception
            with the given string. The exception is catched by the framework.
            and when the test results are shown the error is also shown
            with the given message.
        </para>
        <para>
            Another assertion procedure is a generic
            <function>Ahven.Assert_Equal</function> procedure.
            It is meant for comparing two objects of same type.
            If the objects are not equal
            the <classname>Assertion_Error</classname> exception
            with the given message string is raised.
        </para>
        <para>
            The third assertion procedure is simple
            <function>Fail</function> which always raises
            the <classname>Assertion_Error</classname> exception.
            It is handy for situations where the execution should not
            reach a certain place (see <xref linkend="fail_example"/>).
        </para><example id="fail_example">
        <title>Fail in action</title>
        <screen><![CDATA[
package body My_Tests is
   ...

   procedure Test_My_Proc is
   begin
      begin
         My_Proc (-1); -- should raise Custom_Error
         Fail ("Custom_Error expected");
      exception
         when Custom_Error =>
            null; -- expected
         -- Note: the exception block should not
         -- catch Assertion_Error. Otherwise
         -- the assertion failure will not be noticed.
      end;
   end Test_My_Proc;
end My_Tests;
]]>
</screen></example>

    </sect1>
    <sect1 id="composing_hierarchies">
        <title>Composing Test Hierarchies With Test Suites</title>
        <para>
		The <classname>Test_Suite</classname> type
		is used to group related tests together.
		You can also add other test suites to the suite
		and create a hierarchy of tests.
	</para>
	<para>
		The tests are added to the test suite
		using either procedure
		<function>Add_Static_Test</function> or
		<function>Add_Test</function>.
		The former procedure is meant for statically
		created tests and it places a copy of the given
		test to the test suite.
		The <function>Add_Test</function> procedure is used
		with dynamically created tests and test objects
		of type Test_Class_Access.
	</para>
	<para>
		At the moment, the dynamically added tests are
		executed first in the order they have been added
		(first in, first out - FIFO)
		and after them the statically added tests, also in
		FIFO order.
	</para>
	<para>
		<xref linkend="suite_example"/> shows how to
		put test cases in a test suite.
	</para>
<example id="suite_example">
        <title>Test Suite</title>
        <screen><![CDATA[
package body My_Tests is
   ...

   function Get_Test_Suite return Ahven.Framework.Test_Suite is
      S : Framework.Test_Suite := Framework.Create_Suite ("All");
      Hello_World_Test : Hello_World.Test;
      Listener_Test    : Basic_Listener_Tests.Test;
   begin
      Framework.Add_Static_Test (S, Hello_World_Test);
      Framework.Add_Static_Test (S, Listener_Test);
      return S;
   end Get_Test_Suite;
end My_Tests;
]]>
</screen></example>
    </sect1>
    <sect1 id="running_tests">
        <title>Running Tests</title>
	<para>
		The tests are run by test runners.
		These runners are procedures which take
		either test cases or test suites as their parameters.
	</para>
	<para>
		Currently, there exists three test runners.
		Ahven.Runner is the basic runner, which prints
		the test results as a hierarchy. Ahven.XML_Runner
		on the other hand writes the test results to
		an XML file, which is understood by continuous
		integration systems like CruiseControl and Hudson.
		The third runner is Ahven.Tap_Runner. It produces
		the results in Test-Anything-Protocol (TAP) format.
	</para>
        <para>
		The recommended way to use these test runners is
		to call them from the main program like shown
		in <xref linkend="runner_example"/>.
	</para>
<example id="runner_example">
        <title>Test Suite</title>
        <screen><![CDATA[with Ahven.Text_Runner;
with Ahven.Framework;
with Simple_Tests;

procedure Tester is
   S : Ahven.Framework.Test_Suite := Ahven.Framework.Create_Suite ("All");
begin
   Ahven.Framework.Add_Test (S, new Simple_Tests.Test);
   Ahven.Text_Runner.Run (S);
end Tester;
]]>
</screen></example>

    </sect1>
</chapter>
